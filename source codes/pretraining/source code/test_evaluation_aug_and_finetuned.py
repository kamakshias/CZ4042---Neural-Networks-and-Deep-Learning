# -*- coding: utf-8 -*-
"""Test Evaluation Aug and FineTuned.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ij74LheQp32H7TdNgLQRELlvs4jMV9bm
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.io import read_file
from matplotlib import image
from matplotlib import pyplot
from PIL import Image
from numpy import asarray
from tensorflow.keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,Dropout,BatchNormalization
from keras.regularizers import l2
import numpy as np
import pandas as pd
import time
import math
from tensorflow.image import resize
import tensorflow.keras.backend as K
import matplotlib.pyplot as plt
import multiprocessing as mp
import statistics

from tensorflow.keras.callbacks import Callback
from keras.preprocessing.image import load_img

from tensorflow.keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,Dropout,BatchNormalization,Lambda
from tensorflow.keras import Sequential
from keras.regularizers import l2

from tensorflow.keras.callbacks import Callback
from keras.callbacks import ModelCheckpoint
from keras.callbacks import EarlyStopping

from sklearn import preprocessing
from sklearn.model_selection import KFold
from sklearn.model_selection import train_test_split

df=pd.read_csv('/home/UG/atrik001/fold_frontal_0_data.txt', sep='\t')
df1=pd.read_csv('/home/UG/atrik001/fold_frontal_1_data.txt', sep='\t')
df2=pd.read_csv('/home/UG/atrik001/fold_frontal_2_data.txt', sep='\t')
df3=pd.read_csv('/home/UG/atrik001/fold_frontal_3_data.txt', sep='\t')
df4=pd.read_csv('/home/UG/atrik001/fold_frontal_4_data.txt', sep='\t')

def df_to_list(df):
    data2=[]
    for i in range(len(df)):
        path="/home/UG/atrik001/aligned/"+str(df['user_id'][i])+"/landmark_aligned_face."+str(df['face_id'][i])+"."+str(df['original_image'][i])              
        if df['gender'][i]=='m':
            gender=0
        else:
            gender=1

        if str(df['age'][i]) == str((0,2)):
            age=0
        elif str(df['age'][i]) == str((4,6)):
            age=1
        elif str(df['age'][i]) == str((8,13)):
            age=2
        elif str(df['age'][i]) == str((15,20)):
            age=3
        elif str(df['age'][i]) == str((25,32)):
            age=4
        elif str(df['age'][i]) == str((38,43)):
            age=5
        elif str(df['age'][i]) == str((48,53)):
            age=6
        elif str(df['age'][i]) == str((60,100)):
            age=7
        data2.append([path,gender,age])
    return data2

df_list1=df_to_list(df)
df_list2=df_to_list(df1)
df_list3=df_to_list(df2)
df_list4=df_to_list(df3)
df_list5=df_to_list(df4)

df_list=[]
for i in (df_list1):
    df_list.append(i)
for i in (df_list2):
    df_list.append(i)
for i in (df_list3):
    df_list.append(i)
for i in (df_list4):
    df_list.append(i)
for i in (df_list5):
    df_list.append(i)

df_new = pd.DataFrame(df_list, columns = ['Path', 'Gender','Age'])
df_new.to_csv("/home/UG/atrik001/data_filtered.csv",index=False)

df_image_x=[]
df_gender_y=[]
df_age_y=[]
for i in range(len(df_new)):
    image = Image.open(df_new['Path'][i])
    image = np.array(image)
    image = tf.image.resize(image, [256, 256]) 
    data = asarray(image)
    for j in data:
        j=j/255
    df_image_x.append(data)
    df_gender_y.append(df_new['Gender'][i])
    df_age_y.append(df_new['Age'][i])

print(len(df_image_x))

x_test, y_test = df_image_x[9492:11527], df_age_y[9492:11527]

x_test = np.asarray(x_test, dtype='float32')
y_test = np.asarray(y_test, dtype='float32')

def step_decay(epoch):
    init_lrate = 1e-3 #TOCHANGE
    drop = 0.1
    epochs_drop = 10000
    lrate = init_lrate * math.pow(drop, math.floor((1+epoch)/epochs_drop))
    return lrate
    
#Definition of weight initializers, optimizers, loss function and learning rate
weight_init = keras.initializers.TruncatedNormal(mean=0.0,stddev=0.01,seed=10)
#bias_init = tf.keras.initializers.Constant(value=0.1)
sgd = keras.optimizers.SGD(learning_rate=0.001,momentum=0.0) #TOCHANGE
loss_func = 'sparse_categorical_crossentropy'
lrate = keras.callbacks.LearningRateScheduler(step_decay)

age_model = keras.models.Sequential([
      Conv2D(96, (7,7), input_shape=(256,256,3), strides=4, padding='valid', activation='relu', kernel_initializer = weight_init),
      MaxPooling2D(pool_size = (3, 3), strides = 2, padding='same'),
      Lambda(lambda x: tf.nn.local_response_normalization(input=x, alpha=0.0001, beta=0.75)),

      Conv2D(256, (5,5), padding='same', activation = 'relu', kernel_initializer = weight_init),
      MaxPooling2D(pool_size = (3, 3), strides = 2, padding = 'same'),
      Lambda(lambda x: tf.nn.local_response_normalization(input=x, alpha=0.0001, beta=0.75)),

      Conv2D(384,(3,3), padding='same', activation='relu', kernel_initializer = weight_init),
      MaxPooling2D(pool_size=(3,3), strides = 2, padding='same'),
      Flatten(),

      Dense(512, activation = "relu", kernel_initializer = weight_init),
      Dropout(0.5),

      Dense(512, activation='relu',kernel_initializer = weight_init),
      Dropout(0.5),

      Dense(8, activation ='softmax', kernel_initializer = weight_init)
])

age_model.compile(loss = loss_func, optimizer = sgd, metrics=['accuracy'])

gender_model = keras.models.Sequential([
      Conv2D(96, (7,7), input_shape=(256,256,3), strides=4, padding='valid', activation='relu', kernel_initializer = weight_init),
      MaxPooling2D(pool_size = (3, 3), strides = 2, padding='same'),
      Lambda(lambda x: tf.nn.local_response_normalization(input=x, alpha=0.0001, beta=0.75)),

      Conv2D(256, (5,5), padding='same', activation = 'relu', kernel_initializer = weight_init),
      MaxPooling2D(pool_size = (3, 3), strides = 2, padding = 'same'),
      Lambda(lambda x: tf.nn.local_response_normalization(input=x, alpha=0.0001, beta=0.75)),

      Conv2D(384,(3,3), padding='same', activation='relu', kernel_initializer = weight_init),
      MaxPooling2D(pool_size=(3,3), strides = 2, padding='same'),
      Flatten(),

      Dense(512, activation = "relu", kernel_initializer = weight_init),
      Dropout(0.5),

      Dense(512, activation='relu',kernel_initializer = weight_init),
      Dropout(0.5),

      Dense(1, activation ='sigmoid', kernel_initializer = weight_init)
])

gender_model.compile(loss = loss_func, optimizer = sgd, metrics=['accuracy'])

inputs = keras.Input(shape=(256, 256, 3))
x = age_model(inputs, training=False)
x = keras.layers.Dropout(0.2)(x)  # Regularize with dropout
outputs = keras.layers.Dense(8, activation='softmax')(x)
transfer_model_age = keras.Model(inputs, outputs)

inputs = keras.Input(shape=(256, 256, 3))
x = gender_model(inputs, training=False)
x = keras.layers.Dropout(0.2)(x)  # Regularize with dropout
outputs = keras.layers.Dense(1, activation='sigmoid')(x)
transfer_model_gender = keras.Model(inputs, outputs)

checkpoint_filepath_age_aug = "/home/UG/atrik001/augmentation_checkpoint_age.h5"
checkpoint_filepath_gender_aug = "/home/UG/atrik001/augmentation_checkpoint.h5"
checkpoint_filepath_age_fine = "/home/UG/atrik001/finetuned_checkpoint_age_final.h5"
checkpoint_filepath_gender_fine = "/home/UG/atrik001/finetuned_checkpoint_final.h5"

batch_size_age = 4
batch_size_gender = 16

# path_1 = "/home/UG/atrik001/augmentation_age_scores_final.csv"
# age_model.load_weights(checkpoint_filepath_age_aug)
# scores = age_model.evaluate(
#     x_test, y_test, verbose=1, batch_size=batch_size_age)
# score_1 = []
# score_1.append(scores)
# df_score = pd.DataFrame(score_1, columns=['loss', 'accuracy'])
# df_score.to_csv(path_1, index=False)

# path_2 = "/home/UG/atrik001/augmentation_gender_scores_final.csv"
# gender_model.load_weights(checkpoint_filepath_gender_aug)
# scores = gender_model.evaluate(
#     x_test, y_test, verbose=1, batch_size=batch_size_gender)
# score_2 = []
# score_2.append(scores)
# df_score = pd.DataFrame(score_2, columns=['loss', 'accuracy'])
# df_score.to_csv(path_2, index=False)

path_3 = "/home/UG/atrik001/finetuned_age_scores_final.csv"
transfer_model_age.load_weights(checkpoint_filepath_age_fine)
scores = transfer_model_age.evaluate(
    x_test, y_test, verbose=1, batch_size=batch_size_age)
score_3 = []
score_3.append(scores)
df_score = pd.DataFrame(score_3, columns=['loss', 'accuracy'])
df_score.to_csv(path_3, index=False)

path_4 = "/home/UG/atrik001/finetuned_gender_scores_final.csv"
transfer_model_gender.load_weights(checkpoint_filepath_gender_fine)
scores = transfer_model_gender.evaluate(
    x_test, y_test, verbose=1, batch_size=batch_size_gender)
score_4 = []
score_4.append(scores)
df_score = pd.DataFrame(score_4, columns=['loss', 'accuracy'])
df_score.to_csv(path_4, index=False)